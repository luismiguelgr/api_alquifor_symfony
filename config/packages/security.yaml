security:
    encoders:
        App\Entity\Usuario:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        usuario:
            entity:
                class: App\Entity\Usuario
                property: email

    firewalls:
        login:
            pattern: ^/api/login
            stateless: true
            anonymous: true
            provider: usuario
            json_login:
                check_path: /api/login_check
                success_handler:
                    lexik_jwt_authentication.handler.authentication_success
                failure_handler:
                    lexik_jwt_authentication.handler.authentication_failure
                require_previous_session: false

        api:
            pattern: ^/api
            stateless: true
            anonymous: false
            provider: usuario
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: true



            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/login_check, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/register, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }











          #security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
#    ->descomentar
#    providers:
#        users_in_memory: { memory: null }
#    firewalls:
#        dev:
#            pattern: ^/(_(profiler|wdt)|css|images|js)/
#            security: false
#        main:
#            anonymous: true
#            lazy: true
#            provider: users_in_memory
#hasta aqui
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
#    access_control: > descomentar
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

#security:
#    encoders:
#        App\Entity\User:
#        algorithm: bcrypt
#
#    providers:
#        entity_provider:
#            entity:
#                class: App\Entity\User
#                    property: username
#
#    firewalls:
#        dev:
#            pattern: ^/(_(profiler|wdt)|css|images|js)/
#            security: false
#        login:
#            pattern: ^/login
#            stateless: true
#            anonymous: true
#            json_login:
#                check_path: /login_check
#                success_handler: lexik_jwt_authentication.handler.authentication_success
#                failure_handler: lexik_jwt_authentication.handler.authentication_failure
#            api:
#                pattern: ^/api
#                stateless: true
#                anonymous: false
#                provider: entity_provider
#                guard:
#                    authenticators:
#                        - lexik_jwt_authentication.jwt_token_authenticator
#            main:
#                anonymous: true
#
#    access_control:
#        - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
#        - { path: ^/register, roles: IS_AUTHENTICATED_ANONYMOUSLY }
#        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }